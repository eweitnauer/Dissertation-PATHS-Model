d = [1,2,3]
d = .(1,2,3)
hist(d)
d = (1,2,3)
d = Vector(1,2,3)
hist(d)
d = vector(1,2,3)
hist(d)
d = c(1,2,3)
hist(d)
d = c(57, 15, 15, 12, 13, 17, 39, 12, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 20, 19, 19, 16, 20, 18, 18, 16, 17, 17, 17, 17, 18, 16, 17, 17, 19, 16, 18, 23, 18, 20, 17, 20, 19, 16, 23, 21, 19, 18, 20, 22, 20, 19, 20, 18, 17, 20, 17, 18, 19, 20, 17, 20, 19, 16, 19, 18, 18, 18, 18, 18, 17, 19, 18, 18, 19, 24, 18, 32, 17, 20, 20, 18, 19, 21, 20, 19, 19, 19, 19, 17, 20, 21, 18, 18, 19, 19, 16, 19, 21, 18, 19, 18, 18, 17, 20, 17, 17, 17, 17, 17, 16, 16, 15, 17, 20, 16, 20, 21, 19, 17, 20, 20, 16, 22, 18, 18, 18, 19, 18, 17, 18, 17, 17, 19, 20, 20, 18, 18, 18, 17, 16, 16, 17, 15, 16, 16, 20, 16, 18, 18, 19, 17, 16, 18, 23, 18, 20, 18, 18, 19, 26, 19, 17, 17, 20, 17, 21, 17, 21, 17, 18, 17, 18, 17, 17, 17, 15, 19, 16, 17, 18, 19, 16, 18, 15, 19, 15, 19, 21, 17, 19, 18, 18, 18, 17, 17, 17, 16, 16, 17, 17, 17, 17, 17, 16, 17, 15, 17, 15, 18, 16, 17, 16, 16, 20, 16, 19, 18, 15, 18, 15, 18, 16, 16, 18, 16, 18, 15, 18, 15, 18, 17, 16, 18, 15, 17, 16, 17, 16, 17, 17, 17, 17, 30, 16, 16, 16, 17, 15, 16, 18, 15, 18, 15, 19, 15, 17, 17, 21, 15, 17, 17, 18, 16, 16, 17, 15, 19, 16, 16, 16, 16, 15, 16, 16, 12, 19, 26, 21, 13, 16, 17, 17, 19, 17, 14, 16, 17, 20, 14, 17, 16, 18, 15, 16, 17, 18, 16, 18, 15, 17, 18, 15, 17, 17, 16, 16, 18, 15, 17, 18, 17, 16, 18, 15, 18, 15, 20, 17, 20, 18, 16, 14, 15, 15, 16, 17, 16, 16, 17, 17, 16, 17, 16, 18, 15, 17, 17, 18, 16, 17, 16, 18, 16, 16, 17, 17, 19, 13, 17, 18, 16, 17, 25, 16, 19, 17, 16, 15, 21, 15, 15, 16, 17, 14, 16, 16, 17, 15, 16, 16, 15, 17, 16, 17, 16, 19, 15, 19, 18, 18, 18, 17, 14, 16, 14, 17, 16, 16, 16, 17, 18, 15, 18, 16, 18, 16, 18, 14, 18, 15, 18, 16, 17, 16, 21, 16, 16, 16, 18, 17, 17, 15, 17, 16, 16, 16, 16, 17, 16, 18, 15, 17, 18, 15, 17, 17, 17, 19, 17, 19, 17, 20, 18, 17, 17, 22, 17, 17, 16, 19, 16, 23, 17, 19, 18, 15, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 15, 16, 17, 17, 15, 16, 17, 16, 14, 17, 16, 17, 17, 18, 18, 16, 17, 16, 19, 14, 17, 16, 16, 17, 17, 16, 17, 18, 18, 19, 17, 18, 18, 17, 17, 18, 17, 17, 20, 17, 19, 18, 22, 18, 19, 18, 16, 19, 16, 18, 20, 16, 16, 19, 22, 19, 21, 20, 17, 21, 19, 17, 17, 17, 18, 17, 18, 16, 18, 18, 17, 16, 17, 17, 17, 16, 17, 17, 16, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 18, 16, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 12, 16, 16, 17, 17, 16, 20, 14, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 17, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 19, 15, 17, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 23, 10, 18, 16, 17, 16, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 17, 17, 16, 17, 16, 18, 15, 27, 15, 11, 14, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 17, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 18, 15, 18, 16, 17, 17, 16, 16, 18, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 17, 16, 17, 17, 16, 17, 18, 15, 18, 16, 16, 19, 15, 18, 16, 17, 15, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 11, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 17, 17, 19, 14, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 17, 16, 17, 22, 11, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 24, 11, 15, 18, 15, 18, 16, 20, 13, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 16, 18, 16, 17, 16, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 15, 19, 15, 18, 18, 14, 16, 18, 16, 17, 16, 17, 18, 15, 17, 16, 17, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 16, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 22, 11, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 17)
hist(d)
hist(d)
d = c(57, 15, 15, 12, 13, 17, 39, 12, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 20, 19, 19, 16, 20, 18, 18, 16, 17, 17, 17, 17, 18, 16, 17, 17, 19, 16, 18, 23, 18, 20, 17, 20, 19, 16, 23, 21, 19, 18, 20, 22, 20, 19, 20, 18, 17, 20, 17, 18, 19, 20, 17, 20, 19, 16, 19, 18, 18, 18, 18, 18, 17, 19, 18, 18, 19, 24, 18, 32, 17, 20, 20, 18, 19, 21, 20, 19, 19, 19, 19, 17, 20, 21, 18, 18, 19, 19, 16, 19, 21, 18, 19, 18, 18, 17, 20, 17, 17, 17, 17, 17, 16, 16, 15, 17, 20, 16, 20, 21, 19, 17, 20, 20, 16, 22, 18, 18, 18, 19, 18, 17, 18, 17, 17, 19, 20, 20, 18, 18, 18, 17, 16, 16, 17, 15, 16, 16, 20, 16, 18, 18, 19, 17, 16, 18, 23, 18, 20, 18, 18, 19, 26, 19, 17, 17, 20, 17, 21, 17, 21, 17, 18, 17, 18, 17, 17, 17, 15, 19, 16, 17, 18, 19, 16, 18, 15, 19, 15, 19, 21, 17, 19, 18, 18, 18, 17, 17, 17, 16, 16, 17, 17, 17, 17, 17, 16, 17, 15, 17, 15, 18, 16, 17, 16, 16, 20, 16, 19, 18, 15, 18, 15, 18, 16, 16, 18, 16, 18, 15, 18, 15, 18, 17, 16, 18, 15, 17, 16, 17, 16, 17, 17, 17, 17, 30, 16, 16, 16, 17, 15, 16, 18, 15, 18, 15, 19, 15, 17, 17, 21, 15, 17, 17, 18, 16, 16, 17, 15, 19, 16, 16, 16, 16, 15, 16, 16, 12, 19, 26, 21, 13, 16, 17, 17, 19, 17, 14, 16, 17, 20, 14, 17, 16, 18, 15, 16, 17, 18, 16, 18, 15, 17, 18, 15, 17, 17, 16, 16, 18, 15, 17, 18, 17, 16, 18, 15, 18, 15, 20, 17, 20, 18, 16, 14, 15, 15, 16, 17, 16, 16, 17, 17, 16, 17, 16, 18, 15, 17, 17, 18, 16, 17, 16, 18, 16, 16, 17, 17, 19, 13, 17, 18, 16, 17, 25, 16, 19, 17, 16, 15, 21, 15, 15, 16, 17, 14, 16, 16, 17, 15, 16, 16, 15, 17, 16, 17, 16, 19, 15, 19, 18, 18, 18, 17, 14, 16, 14, 17, 16, 16, 16, 17, 18, 15, 18, 16, 18, 16, 18, 14, 18, 15, 18, 16, 17, 16, 21, 16, 16, 16, 18, 17, 17, 15, 17, 16, 16, 16, 16, 17, 16, 18, 15, 17, 18, 15, 17, 17, 17, 19, 17, 19, 17, 20, 18, 17, 17, 22, 17, 17, 16, 19, 16, 23, 17, 19, 18, 15, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 15, 16, 17, 17, 15, 16, 17, 16, 14, 17, 16, 17, 17, 18, 18, 16, 17, 16, 19, 14, 17, 16, 16, 17, 17, 16, 17, 18, 18, 19, 17, 18, 18, 17, 17, 18, 17, 17, 20, 17, 19, 18, 22, 18, 19, 18, 16, 19, 16, 18, 20, 16, 16, 19, 22, 19, 21, 20, 17, 21, 19, 17, 17, 17, 18, 17, 18, 16, 18, 18, 17, 16, 17, 17, 17, 16, 17, 17, 16, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 18, 16, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 12, 16, 16, 17, 17, 16, 20, 14, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 17, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 19, 15, 17, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 23, 10, 18, 16, 17, 16, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 17, 17, 16, 17, 16, 18, 15, 27, 15, 11, 14, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 17, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 18, 15, 18, 16, 17, 17, 16, 16, 18, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 17, 16, 17, 17, 16, 17, 18, 15, 18, 16, 16, 19, 15, 18, 16, 17, 15, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 11, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 17, 17, 19, 14, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 17, 16, 17, 22, 11, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 24, 11, 15, 18, 15, 18, 16, 20, 13, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 16, 18, 16, 17, 16, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 15, 19, 15, 18, 18, 14, 16, 18, 16, 17, 16, 17, 18, 15, 17, 16, 17, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 16, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 22, 11, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 17);
hist(d);
install knitr
install('knitr')
install.packages('knitr')
```
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
setwd("~/Code/diss/modelling/current/analysis")
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
annotate_data = function(data) {
#create new conditions, to separate each factor (sim and schedule)
data$sch_cond = ifelse(data$cond %in% c('blocked-dis-dis','blocked-sim-sim','blocked-dis-sim','blocked-sim-dis'),'blocked','interleaved')
# are the comparisons within one category done on similar or dissimilar elements?
data$sim_cond_wi_cat  = ifelse(data$cond %in% c('simultaneous-dis-sim','interleaved-dis-sim','interleaved-dis-dis','simultaneous-dis-dis'),'dissimilar','similar')
data$sim_cond_bw_cat = ifelse(data$cond %in% c('simultaneous-dis-sim','interleaved-dis-sim','interleaved-sim-sim','simultaneous-sim-sim'),'similar','dissimilar')
# create new condition sim_cond_both, which can take one of four values
for(i in 1:length(data$cond)) {
cond_str = unlist(strsplit(as.character(data$cond[i]), '-'));
data$sim_cond_both_cat[i] = paste0(substr(data$sim_cond_wi_cat[i],1,3)
, '-'
,substr(data$sim_cond_bw_cat[i],1,3));
}
# reorder similarity factor levels
data$sim_cond_both_cat = factor(data$sim_cond_both_cat, c("dis-dis", "sim-dis", "dis-sim", "sim-sim"));
str_count_eql <- function(a,b) {
la <- unlist(strsplit(as.character(a),split=""));
lb <- unlist(strsplit(as.character(b),split=""));
return(sum(la == lb));
}
# count number of correctly classified test scenes
for(i in 1:length(data$trial_idx)){
data$num_correct[i] = str_count_eql(as.character(data$subject_test_answers[i]),as.character(data$correct_test_answers[i]))
data$num_correct_new[i] = str_count_eql(substr(as.character(data$subject_test_answers[i]),1,4),substr(as.character(data$correct_test_answers[i]),1,4))
data$num_correct_old[i] = str_count_eql(substr(as.character(data$subject_test_answers[i]),5,6),substr(as.character(data$correct_test_answers[i]),5,6))
}
# the problem with the number of correctly classified scenes (test_points) is, that Ss might get
# left and right wrong and thereore get, e.g., 0 instead of 6 points.
# Solution: use another measure for consitency [0..3], which is
# consistency = max(test_points, 6-test_points)-3
for(i in 1:length(data$trial_idx)){
data$consistency[i] = max(data$num_correct[i], 6-data$num_correct[i])-3;
}
# recalculate the total train time by adding the times spent on each pair for the interleaved condition,
# since the original values are in many cases wrong (just the time spent on the first scene)
for(i in 1:length(data$mturk_id)){
if(data$sch_cond[i]=="interleaved"){
data$train_time[i] = sum(as.numeric(unlist(strsplit(as.character(data$times_train[i]),split=';'))))
}
}
# new idea by Rob: use the problem difficulty as a covariate!
# calculate problem difficulty as average accuracy
d_pbp = ddply(.data=data, .variables=.(pbp)
,accuracy=mean(found_solution)
,.fun=summarize);
get_pbp_accuracy <- function(pbp) {
return(d_pbp$accuracy[d_pbp$pbp==pbp]);
}
data$pbp_accuracy = as.numeric(lapply(data$pbp, get_pbp_accuracy));
return(data)
}
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
source("loading.r");
data = load_data();
source("loading.r");
data = load_data();
View(data)
View(data)
length(data$found_solution)
View(data)
View(data)
table(data$pbp)
print(sum(data$found_solution) / length(data$found_solution) * 100, '%');
print(sum(data$found_solution) / length(data$found_solution) * 100 + '%');
print(sum(data$found_solution) / length(data$found_solution));
print("percentage of problems solved:");
print(sum(data$found_solution) / length(data$found_solution));
print("% problems solved:");
print(100 * sum(data$found_solution) / length(data$found_solution));
data = annotate_data(data);
View(data)
View(data)
bargraph.CI(x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=sim_cond_bw_cat,response=found_solution,ylim=c(0.0, 1.0),names.arg=c('b/w dis','b/w sim'),data=data,legend=T,ylab='correct answer rate')#, main='between category similarity')
bargraph.CI(group=sim_cond_wi_cat,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate', main='within category similarity')
bargraph.CI(x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,group=sim_cond_both_cat,legend=T,ylab='correct answer rate')#, main='within-between category similarity')
bargraph.CI(group=sim_cond_wi_cat,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate', main='within category similarity')
bargraph.CI(x.factor=sim_cond_bw_cat,response=found_solution,ylim=c(0.0, 1.0),names.arg=c('b/w dis','b/w sim'),data=data,legend=T,ylab='correct answer rate')#, main='between category similarity')
bargraph.CI(group=sim_cond_wi_cat,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate', main='within category similarity')
bargraph.CI(x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(group=pbp,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(group=pbp,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.1),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(group=pbp,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(group=pbp,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.5),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(group=pbp,x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_both_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_bw_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='blocked'],legend=T,ylab='correct answer rate')#, main='scheduling condition')
data[data$sch_cond=='blocked']
data$sch_cond
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='blocked',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
setwd("~/Dropbox/Bongard Problems/pbp_mturk_exp3_2")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
data = annotate_data(data);
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
data = annotate_data(data);
bargraph.CI(x.factor=sch_cond,response=train_time,ylim=c(0,120),data=data,legend=T,ylab='train time')
bargraph.CI(x.factor=sch_cond,response=train_time,ylim=c(0,1200),data=data,legend=T,ylab='train time')
bargraph.CI(x.factor=sim_cond_bw_cat,response=train_time,ylim=c(0,120),data=data,legend=T,ylab='train time', main='between category similarity')
bargraph.CI(x.factor=sim_cond_bw_cat,response=train_time,ylim=c(0,1200),data=data,legend=T,ylab='train time', main='between category similarity')
bargraph.CI(x.factor=sim_cond_wi_cat,response=train_time,ylim=c(0,1200),data=data,legend=T,ylab='train time', main='within category similarity')
bargraph.CI(x.factor=sch_cond,response=train_time,ylim=c(0,1200),data=data,group=sim_cond_bw_cat,legend=T,ylab='train time',main='between category similarity')
bargraph.CI(x.factor=sch_cond,response=train_time,ylim=c(0,1200),data=data,group=sim_cond_wi_cat,legend=T,ylab='train time',main='between category similarity')
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
data = annotate_data(data);
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
warnings()
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,response=train_time,data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
View(data)
View(data)
data$train_time
sapply(data, mode)
sapply(data, class)
as.numeric(data$train_time)
bargraph.CI(x.factor=sch_cond,response=train_time/1000,ylim=c(0,120),data=data[data$found_solution==0,],group=sim_cond_both_cat,legend=T,ylab='train time', main='unsolved problems')
bargraph.CI(x.factor=sch_cond,response=train_time/1000,ylim=c(0,120),data=data[data$found_solution==1,],group=sim_cond_both_cat,legend=T,ylab='train time', main='solved problems')
bargraph.CI(x.factor=found_solution,response=train_time,ylim=c(0,120),names.arg=c('not solved', 'solved'),data=data,ylab='train time')
bargraph.CI(x.factor=sch_cond,response=train_time/1000,ylim=c(0,120),data=data[data$found_solution == 1,],group=sim_cond_both_cat,legend=T,ylab='train time in seconds')#, main='solved problems')
data$train_time = as.numeric(data$train_time)
warnings()
table(data$train_time)
warnings()
hist(data$train_time)
sum(data$train_time)
bargraph.CI(x.factor=sch_cond,response=train_time/1000,ylim=c(0,120),data=data[data$found_solution==0,],group=sim_cond_both_cat,legend=T,ylab='train time', main='unsolved problems')
bargraph.CI(x.factor=pbp,response=train_time,data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
source("loading.r");
data = load_data();
hist(data$steps)
hist(data$train_time)
sapply(data, class)
source("loading.r");
source("loading.r");
data = load_data();
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
data = read.csv("pbp-computer-results.csv", header=TRUE);
data = read.csv("pbp-computer-results.csv", header=TRUE, , colClasses=c("steps"="numeric"));
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="character"));
View(data)
View(data)
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
data = rename(data, c("solved"="found_solution","pres_mode"="cond","steps"="train_time","rep"="mturk_id"));
data$found_solution = ifelse(data$found_solution == 'true', 1, 0);
print("subjects total:")
print(length(table(data$mturk_id)))
print("% problems solved:");
print(100 * sum(data$found_solution) / length(data$found_solution));
return(data)
}
hist(data$train_time)
data = load_data();
data = annotate_data(data);
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
data = rename(data, c("solved"="found_solution","pres_mode"="cond","steps"="train_time","rep"="mturk_id"));
data$found_solution = ifelse(data$found_solution == 'true', 1, 0);
print("subjects total:")
print(length(table(data$mturk_id)))
print("% problems solved:");
print(100 * sum(data$found_solution) / length(data$found_solution));
data$sch_cond = ifelse(data$cond %in% c('blocked-dis-dis','blocked-sim-sim','blocked-dis-sim','blocked-sim-dis'),'blocked','interleaved')
# are the comparisons within one category done on similar or dissimilar elements?
data$sim_cond_wi_cat  = ifelse(data$cond %in% c('blocked-dis-sim','interleaved-dis-sim','interleaved-dis-dis','blocked-dis-dis'),'dissimilar','similar')
data$sim_cond_bw_cat = ifelse(data$cond %in% c('blocked-dis-sim','interleaved-dis-sim','interleaved-sim-sim','blocked-sim-sim'),'similar','dissimilar')
for(i in 1:length(data$cond)) {
cond_str = unlist(strsplit(as.character(data$cond[i]), '-'));
data$sim_cond_both_cat[i] = paste0(substr(data$sim_cond_wi_cat[i],1,3)
, '-'
,substr(data$sim_cond_bw_cat[i],1,3));
}
data = read.csv("pbp-computer-results.csv", header=TRUE, colClasses=c("steps"="numeric"));
data = rename(data, c("solved"="found_solution","pres_mode"="cond","steps"="train_time","rep"="mturk_id"));
data$found_solution = ifelse(data$found_solution == 'true', 1, 0);
print("subjects total:")
print(length(table(data$mturk_id)))
print("% problems solved:");
print(100 * sum(data$found_solution) / length(data$found_solution));
return(data)
data$sch_cond = ifelse(data$cond %in% c('blocked-dis-dis','blocked-sim-sim','blocked-dis-sim','blocked-sim-dis'),'blocked','interleaved')
# are the comparisons within one category done on similar or dissimilar elements?
data$sim_cond_wi_cat  = ifelse(data$cond %in% c('blocked-dis-sim','interleaved-dis-sim','interleaved-dis-dis','blocked-dis-dis'),'dissimilar','similar')
data$sim_cond_bw_cat = ifelse(data$cond %in% c('blocked-dis-sim','interleaved-dis-sim','interleaved-sim-sim','blocked-sim-sim'),'similar','dissimilar')
data.sim_cond_both_cat
data.sim_cond_wi_cat
data$sim_cond_wi_cat
data$sim_cond_wi_cat[,1]
data$sim_cond_wi_cat[,2]
data$sim_cond_wi_cat[1]
data$sim_cond_wi_cat[2]
data$sim_cond_wi_cat[3]
data$sim_cond_both_cat = as.factor(c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat)));
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))[1]
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))[1,1]
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))[1,]
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))[,]
c(as.character(data$sim_cond_wi_cat), as.character(data$sim_cond_bw_cat))[2]
interaction(data$sim_cond_wi_cat, data$sim_cond_bw_cat)
data$sim_cond_wi_cat
data$sim_cond_bw_cat
data$sim_cond_both_cat2 = interaction(data$sim_cond_wi_cat, data$sim_cond_bw_cat);
View(data)
View(data)
setwd("~/Code/diss/modelling/current/analysis")
library(plyr)
library(sciplot)
library(ez)
rm(list=ls())
source("loading.r");
data = load_data();
data = annotate_data(data);
## accuracy plots #############################################
# scheduling condition
bargraph.CI(x.factor=pbp,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data,legend=T,ylab='steps to solution')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data[data$solved == 1],legend=T,ylab='steps to solution')
View(data)
View(data)
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data[data$found_solution == 1],legend=T,ylab='steps to solution')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data[data$found_solution == 1,],legend=T,ylab='steps to solution')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data,legend=T,ylab='steps to solution or fail')
bargraph.CI(x.factor=pbp,group=sch_cond,response=train_time,data=data[data$found_solution == 1,],legend=T,ylab='steps to solution')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_both_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=pbp,group=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data[data$sch_cond=='interleaved',],legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=sch_cond,response=found_solution,ylim=c(0.0, 1.0),group=sim_cond_wi_pair,data=data,legend=T,ylab='correct answer rate', main='within pair similarity')
bargraph.CI(x.factor=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')#, main='scheduling condition')
bargraph.CI(x.factor=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate', main='w/i similarity')
bargraph.CI(x.factor=sim_cond_bw_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate', main='b/w similarity')
bargraph.CI(x.factor=sim_cond_wi_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate', main='w/i similarity')
bargraph.CI(x.factor=sim_cond_both_cat,group=sch_cond,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')
bargraph.CI(x.factor=sch_cond,group=sim_cond_both_cat,response=found_solution,ylim=c(0.0, 1.2),data=data,legend=T,ylab='correct answer rate')
